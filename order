ETAPE 1: Scanner A depuis le haut de la pile, pour trouver un nombre du Paquet 1.
	Appelons ce nombre hold_first.
ETAPE 2: Scanner de nouveau A mais depuis le bas de la pile, pour trouver un nombre du Paquet 1.
	Appelons ce nombre hold_second.
ETAPE 3: Comparer le nombre de mouvement nécessaire pour ammener l'un ou l'autre au début de la pile.
	(cd schéma sur la doc)
ETAPE 4: Maintenant, le bon nombre est en haut de la stack, mais il y a deux choses a verifier avant de l'envoyer sur B.
	Il faut verifier si le nombre est plus grand ou plus petit que tout les autres nombres de B.

ETAPE 5: Repeter les étapes 1-4 jusqu'à ce que tout les nombres du Chunk 1 ne soit plus sur A

ETAPE 6: Repeter les etapes 1-4 pour les autres chunks, jusqu'à ce que A soit vide

ETAPE 7: Maintenant que A est vide, il faut trouver le plus gros nombre de B et le mettre en haut de la pile, puis le push sur A. On repete l'opération jusqu'à ce que B soit vide.
(on peux utiliser la même logique que l'étape 3 pour limiter le nombre de mouvements)

La Stack A devrait être trié!


[0;2] [3;5]
-------------->
5 6
0 1 2 3 4 7
-------------->

ra

rb